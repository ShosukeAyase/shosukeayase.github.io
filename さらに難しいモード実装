<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>トロッコゲーム - さらに難しいモード</title>
  <style>
    body {
      text-align: center;
      font-family: Arial, sans-serif;
    }
    canvas {
      background: #eee;
      margin-top: 20px;
      border: 1px solid #000;
    }
    button {
      font-size: 18px;
      padding: 8px 16px;
      margin: 5px;
    }
    #difficultyPanel {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h1>トロッコゲーム - さらに難しいモード</h1>
  <p>5秒以内に「左に動かす」または「右に動かす」を操作して、最高得点のレーンを狙え！</p>
  <!-- モード選択パネル（他モードとの共通パネルに今回の「さらに難しいモード」も追加） -->
  <div id="difficultyPanel">
    <p>モードを選択してください：</p>
    <button id="easyModeButton">簡単モード (3～5人 / 2秒制限)</button>
    <button id="hardModeButton">難しいモード (5～8人 / 4秒制限)</button>
    <button id="endless30Button">エンドレスモード 30秒</button>
    <button id="endless60Button">エンドレスモード 1分</button>
    <button id="ultraHardButton">さらに難しいモード (3レーン・5秒制限)</button>
  </div>
  <canvas id="gameCanvas" width="500" height="400"></canvas>
  <br>
  <!-- 通常モード用（2レーン）：レバー操作ボタン -->
  <button id="leverButton" style="display:none;">レバー操作</button>
  <!-- さらに難しいモード用（3レーン）：左右操作ボタン -->
  <button id="leftButton" style="display:none;">左に動かす</button>
  <button id="rightButton" style="display:none;">右に動かす</button>
  <!-- 通常モード用：新しくゲームを始める／難易度選択に戻るボタン -->
  <button id="newGameButton" style="display:none;">新しくゲームを始める</button>
  <button id="changeDifficultyButton" style="display:none;">難易度選択に戻る</button>
  <!-- 共通：エンドレスモード用中断ボタン（今回は対象外ですが保持） -->
  <button id="quitButton" style="display:none;">中断してスタートに戻る</button>
  <p id="info"></p>

  <script>
    // 画面要素の取得
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");
    const info = document.getElementById("info");
    const difficultyPanel = document.getElementById("difficultyPanel");
    const easyModeButton = document.getElementById("easyModeButton");
    const hardModeButton = document.getElementById("hardModeButton");
    const endless30Button = document.getElementById("endless30Button");
    const endless60Button = document.getElementById("endless60Button");
    const ultraHardButton = document.getElementById("ultraHardButton");
    const leverButton = document.getElementById("leverButton");
    const leftButton = document.getElementById("leftButton");
    const rightButton = document.getElementById("rightButton");
    const newGameButton = document.getElementById("newGameButton");
    const changeDifficultyButton = document.getElementById("changeDifficultyButton");
    const quitButton = document.getElementById("quitButton");

    // キャラクターのデータ（点数と表示名）
    const characters = {
      criminal: { points: 1, label: "犯罪者" },
      neet: { points: 2, label: "ニート" },
      elderly: { points: 3, label: "高齢者" },
      common: { points: 5, label: "一般人" },
      child: { points: 7, label: "子ども" },
      rich: { points: 10, label: "金持ち" }
    };

    // グローバル変数
    let lanes = [];         // 各レーンの対象リスト（配列の長さがレーン数）
    let targetCount = 0;    // 各レーンの対象数（全レーン同じ）
    let laneCount = 2;      // 初期値（通常モード：2レーン、ultraHardは3レーン）
    let trolleyLane = 0;    // トロッコの現在のレーン（インデックス）
    let leverUsed = false;
    let startTime = null;
    let animationFrameId;
    let trolleyY = 0;

    // モード判定用変数
    // gameMode: "normal", "endless", "ultraHard"
    let gameMode = "normal";
    let difficultyMode = "";  // 通常モード用 ("easy" / "hard")
    let endlessTotalTime = 0; // エンドレスモード総制限時間（ms）
    let endlessStartTime = 0; // エンドレスモード開始時刻
    let endlessRoundCount = 0; // エンドレスモード総ラウンド数
    let endlessClearedCount = 0; // エンドレスモードクリアラウンド数
    let endlessTotalScore = 0;   // エンドレスモード総合得点
    let endlessTimeoutId = null;

    // 各ラウンドの制限時間（ms）
    let roundTime = 3000; // 初期値（後でモードに応じて設定）

    const startYCoord = 0;
    const collisionY = 250; // 対象が表示される開始位置

    // ランダムにキャラクターを選ぶ
    function randomCharacter() {
      const keys = Object.keys(characters);
      const randomKey = keys[Math.floor(Math.random() * keys.length)];
      return characters[randomKey];
    }

    // 指定人数分の対象を生成
    function generateLaneWithCount(count) {
      let laneTargets = [];
      for (let i = 0; i < count; i++) {
        laneTargets.push(randomCharacter());
      }
      return laneTargets;
    }

    // 各モードに応じたレーン数・対象数の初期化
    function initLanes() {
      if (gameMode === "ultraHard") {
        laneCount = 3;
        // ultraHardモードは難しいモードと同じ人数：5～8人
        var minCount = 5, maxCount = 8;
      } else if (gameMode === "normal" || gameMode === "endless") {
        laneCount = 2;
        if (gameMode === "normal") {
          if (difficultyMode === "easy") { minCount = 3; maxCount = 5; }
          else if (difficultyMode === "hard") { minCount = 5; maxCount = 8; }
        } else {
          // エンドレスモード例として2レーンの場合（以前の仕様）
          minCount = 3; maxCount = 5;
        }
      }
      targetCount = Math.floor(Math.random() * (maxCount - minCount + 1)) + minCount;
      // ここでは各レーンの人数を同じにする（バランス調整は以前の手法と同様に可能）
      lanes = [];
      for (let i = 0; i < laneCount; i++) {
        lanes.push(generateLaneWithCount(targetCount));
      }
    }

    // 各ラウンドの初期化処理
    function initGame() {
      initLanes();
      // キャンバスの高さを、対象の数に合わせて動的に調整
      // collisionY + 上部余白30px + (対象数 * 25px) + 下部余白20px
      canvas.height = collisionY + 30 + (targetCount * 25) + 20;

      // モードごとの制限時間設定
      if (gameMode === "normal") {
        roundTime = (difficultyMode === "easy" ? 2000 : 4000);
      } else if (gameMode === "endless") {
        roundTime = 3000; // エンドレスモードは各ラウンド3秒固定
      } else if (gameMode === "ultraHard") {
        roundTime = 5000; // さらに難しいモードは5秒固定
      }

      // ultraHardモードでは初期位置を中央のレーン（インデックス1）にする
      trolleyLane = (gameMode === "ultraHard") ? 1 : 0;
      leverUsed = false;
      startTime = null;
      trolleyY = startYCoord;
      if (gameMode === "normal" || gameMode === "endless") {
        info.innerText = "";
      }
      // 表示する操作ボタンの切り替え
      if (gameMode === "ultraHard") {
        leverButton.style.display = "none";
        leftButton.style.display = "inline-block";
        rightButton.style.display = "inline-block";
      } else {
        leverButton.style.display = "inline-block";
        leftButton.style.display = "none";
        rightButton.style.display = "none";
      }
      newGameButton.style.display = "none";
      changeDifficultyButton.style.display = "none";
      // エンドレスモード・通常モード共通：quitButton（中断）は非表示
      quitButton.style.display = "none";
      difficultyPanel.style.display = "none";
    }

    // 描画関数
    function drawGame() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const laneWidth = canvas.width / laneCount;
      
      // レーン区切り線の描画
      ctx.strokeStyle = "#000";
      ctx.lineWidth = 2;
      ctx.beginPath();
      for (let i = 1; i < laneCount; i++) {
        ctx.moveTo(i * laneWidth, 0);
        ctx.lineTo(i * laneWidth, canvas.height);
      }
      ctx.stroke();

      // 各レーンの対象を表示
      ctx.font = "18px Arial";
      ctx.textAlign = "center";
      ctx.fillStyle = "black";
      for (let i = 0; i < laneCount; i++) {
        for (let j = 0; j < lanes[i].length; j++) {
          let target = lanes[i][j];
          let targetY = collisionY + 30 + j * 25;
          ctx.fillText(target.label + " (" + target.points + "点)", laneWidth/2 + i * laneWidth, targetY);
        }
      }

      // トロッコの描画：現在のレーンに合わせたX座標
      const trolleyX = (trolleyLane * laneWidth) + laneWidth/2;
      ctx.fillStyle = "red";
      ctx.fillRect(trolleyX - 20, trolleyY - 20, 40, 40);

      //
